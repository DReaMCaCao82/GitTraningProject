[개발환경 구축]
-IDE다운로드 및 설치
https://www.visualstudio.com/-다운로드->모든 다운로드->Visual Studio 2015 ->Express 2015 for Web클릭후 다운로드
약 5GB 필요

[HTML5]
-HTML5가 인터넷 업계에서 알려지게 된 계기는 바로 
 2009년 구글의 웹개발자 콘퍼런스인 "구글 I/O"에서 
 자사의 서비스가 아닌 HTML5를 데모로 시연하면서 차세대 웹 기술로 
 지원하겠다는 천명을 하면서부터 시작
-스티브 잡스가 애플 아이폰에 플래시 탑재를 거부하면서 대응 기술로
 HTML5를 홍보하기 시작.
-HTML5 활성화의 계기는 인터넷을 사용하는 기기가 PC에서 
 스마트폰, 태블릿PC, 스마트TV 등으로 확대되면서 2010년대 초반 활성화 하기 시작
-HTML 5는  특정 플러그인에 의존하지 않고 콘텐츠를 제공하는 것이 목표
-좀 더 의미있는(Semantic) 태그 사용
-군 더더기 없는 짧은 코드 사용

1. HTML5의 구조

새로운 DOCTYPE]
-<!DOCTYPE html> 예전처럼, 복잡한 DOCTYPE은 사라짐.

-XHTML 1.0 Transitional의 DOCTYPE선언
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/ TR/xhtml1/DTD/xhtml1-transitional.dtd">


간결해진 스크립트 선언]

-자바스크립트 선언
-HTML5
<script>

</script>

-XHTML 1.0 Transitional
<script type="text/javascript">
</script>
-CSS선언
-HTML5
<style>

</style>

-XHTML 1.0 Transitional
<style type="text/css">

</style>


예]
<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>HTML5 마크업</title>
</head>
<body>
<p>차세대 웹표준으로서 HTML5</p>
</body>
</html>




2.HTML5 새로운 태그 및 속성

새로운 태그들]
문서 레이아웃 관련]의미 있는 태그 사용으로 검색 엔진에 최적화된 레이아웃 구성.
                   section, article, aside, nav, footer, header, hgroup

	<header><header>
	<nav></nav>
	<article>
		<section></section>

	</article>
	<aside></aside>
	<footer></footer>


	<section>:스타일을 적용하기 위해서 section Element 를 사용해서는 안되며 그런 용도라면 Div Element 를 사용하도록 해야함 
		  Section Element 는 장이나 절을 나타내므로 제목과 본문을 하나로 묶을 때 사용
		  제목과 본문에 스타일을 적용하고 싶다거나 구분을 지으려 한다면 Div Element 를 사용

		  예]
		  Element 를 구성하게되면 제목과 본문을 다른 Section 으로 해석하게 됨 본문의 Level 이 하나 더 내려가게 됨

		  <section class="title">
			<h1>제목</h1>
			<section class="content">
				<p>본문</p>
			</section>
		  </section>

		  위를 아래처럼
		  <section class="title">
			<h1>제목</h1>
			<div class="content">
				<p>본문</p>
			</div>
		 </section>


	<header>와 <footer>:섹션요소로 구분된 콘텐츠 구역에 대한 머릿말과 꼬릿말을 지칭
	<nav>:nav Element 는 Navigation Section 을 나타냄.페이지상의 Header 나 좌측, 우측에 표현하는 Link 모음이고 간혹 Footer 에도 표현
	      스타일을 적용하기 위해서 nav Element 를 사용하면 안됨
        <article>:article Element 는 블로그에 포스트된 글들, 뉴스사이트의 기사들의 묶음 같은 독립된 하나의 컨텐츠
	<aside>:aside Element 는 보충기사, 사이드바, 광고 와 같이 Main 컨텐츠와는 관련이 적어 분리될 수 있다고 생각되는 것에 사용
		nav Element 들을 Group 화 할때도 사용
	<hgroup>:hgroup Element 는 제목과 이에 따르는 소제목이나 부제를 그룹화하기 위해 사용하는데, h1~h6 Element 만 포함할 수 있음
	         섹션의 제목을 나타낸다.
		섹션의 제목이 여러 단계를 가지고 있을 때 이를 hgroup 요소로 기술할 수 있다
		<article>
			<hgroup>
				<h1>자바</h1>
				<h2>프로그래밍 언어</h2>
			</hgroup>
			<p>자바는 재밌는 프로그래밍 언어이다</p>
			<section>
				<h1>자바의 개발환경 구축</h1>
				<p>JDK를 설치하고 이크립스를 다운받자</p>
			</section>
			<section>
				<h1>자바란</h1>
				<p>객체지향언어이다</p>
			</section>
		</article>

멀티디미어 관련]2차원 그래픽 API에 사용할 수 있는 canvas 요소와 
                    내장 비디오 및 오디오 재생을 위한 video, audio 요소를 통해 
					멀티미디어 기능을 강화
                     video, audio, source, canvas

<video>:
주요 속성(Attributes)
– src – 동영상 파일의 위치 설정
– autoplay – 동영상이 준비되었을 때 바로 실행할지 여부
– controls – 제어창(displays controls)을 보여줄건지 여부
– preload – 페이지 로드시 보여줄건지 여부
– loop – 몇 번 반복할 건지 여부
– poster – 동영상 대체 이미지
– height & width – 동영상 플레이어의 height와 width 설정

브라우저별별 지원 비디오 코덱 
--------+----------------+----------------+----------------+----------------+----------------
비디오  | 	 IE 9    | FireFox 3.6.17 | Opera 11.11    |Chrome 12.0.742 |  Safari 5.0.5 
--------+----------------|----------------+----------------|----------------+----------------
Ogg     |      X         |       O        |       O        |       O        |    X 
--------+----------------+----------------+----------------+----------------+-----------------
MPEG 4  |      O         |       X        |       X        |       O        |    O  
--------+----------------+----------------+----------------+----------------+---------------
WebM    |     △         |       X        |       O        |       O        |    X 
--------+----------------+----------------+----------------+----------------+----------------

예]
  <video src="video/video.mp4"  width="640" height="360" autoplay="autoplay">
        <!– 브라우저가 vidoe 태그를 지원하지 않으면 이 부분이 보여짐 -->
        <!– 이 부분에 Flash 또는 Silverlight Video를 포함할 수 있음 -->
  </video>

 <video id="movie" width="320" height="240" preload="auto" controls="controls">
        <source src="video/video.mp4" />
 </video>


<audio>:
산업표준인 MP3와 AAC 오디오 지원
– Wav, AAC, MP3
------------------+---------+----------+-------+--------+------------------
오디오코덱        |    IE   |  FireFox | Opera | Chrome | Safari  
------------------+---------+----------+-------+--------+-----------
Vorbis(oga, ogg)  |   X     |     O    |    O  |    O   |   X 
------------------+---------+----------+-------+--------+-----------
wav, wma          |   O     |     O    |    O  |    X   |   O 
------------------+---------+----------+-------+--------+-----------
 mp3              |   O     |     X    |    X  |    O   |   O
------------------+---------+----------+-------+--------+---------
 AAC              |   O     |     X    |    X  |    O   |   O
 -----------------+---------+----------+-------+--------+------------


주요 속성
– src – 오디오 파일의 위치 설정
– autoplay – 설정되어있으면 오디오파일이 준비되
었을 때 바로 실행됨
– controls – 오디오 컨트롤을 보일건지 설정
– preload – 페이지 로드시 오디오 파일도 로드할
건지 설정
 <audio src="audio/sound.mp3"  autoplay="autoplay" controls="controls">
        <!-- Only shown when browser doesn’t support audio -->
        <!-- You could embed Flash or Silverlight audio here -->
    </audio>


<canvas>:
자바스크립를 사용하여 2D 그래픽을 그릴 수 있는 블록 요소
– 여러가지 함수 포함 : paths, boxes, circles,text 

//1]HTML 영역에 <canvas /> 태그 적용
<canvas id="canvas" width="200" height="200">
현재 브라우저는 HTML5 canvas를 제공하지 않습니다.
</canvas>
<script>
	window.onload = function () {
	    //2]자바스트립트 영역에서 DOM으로 캔버스 접근
            var example = document.getElementById("canvas");
	    //3]getContext(“2d”) 메서드로 컨텍스트 개체 생성
            var context = example.getContext("2d");
	    //4]주요 API로 그림/도형 그리기
            context.fillStyle = "rgb(255,0,0)";
            context.fillRect(50, 50, 100, 100);
        }
</script>



패스 그리기 : path 관련 API를 사용하여 모든 모
양 생성 가능
– beginPath() : 경로 그리기 시작
– closePath() : 경로 그리기 종료
– lineTo() : 선 그리기
– moveTo() : 이동
– arc() : 호 그리기
– arcTo() : 호 그리기
– quadraticCurveTo() : 이차 베지어(베지에) 곡선
– bezierCurveTo() : 베지어 곡선


삼각형]
<script >
$(function () {
var canvas = document.getElementById("canvas");
if (canvas.getContext) {
var ctx = canvas.getContext("2d");
ctx.beginPath();
ctx.moveTo(75, 50);
ctx.lineTo(70, 100);
ctx.lineTo(25, 100);
ctx.fill();
}
});
</script>
원]
$(document).ready(
function () {
var ctx = document.getElementById('canvas').getContext('2d');
ctx.beginPath();
ctx.arc(100, 100, 50, 0, (Math.PI / 180) * 360, true);
ctx.fillStyle = "rgb(0, 255, 255)";
ctx.fill();
ctx.stroke();
}
);


텍스트 관련]

mark-mark Element 는 설명을 위해 특정키워드를 강조한다거나 인용문의 일부를 강조하기 위해 또는 검색결과의 검색 키워드를 강조하는 등의 
     시각적 주목효과를 Text 에 주려 한다는 것을 표현하기 위해 사용





기타 태그]
progress-작업의 진행정도를 나타내는 태그
	<progress value="30" max="100">0</progress>

datalist- 서식 요소에 입력 추천 값을 제시해주는 요소
	  검색 사이트의 추천 기능 
	<label for="keyword">검색어를 입력하세요</label>
	<input type="search" id="keyword" name="keyword" list="dataList_id">
	<datalist id="dataList_id">
	    <option value="html5"></option>
	    <option value="html5 video"></option>
	    <option value="html5 강좌"></option>
	    <option value="html5 canvas"></option>
	    <option value="html5 demo"></option>
	</datalist>

figure-img 요소들이나 바로 이어지는 figcaption 요소를 포함하는 컨테이너 역할을 하는 태그
figcaption-figure  요소를 이용할 때 캡션을 나타내는데 사용하는 태그로 figure  요소의 첫번째 또는 마지막에 자식 요소로 사용.
           즉 figure 요소로 정의한 대상에 실직적인 설명글을 붙이는 태그.
	   figure 요소 태그에서만 사용 가능 




	
새로운 속성들]
HTML5는 개발자의 수고를 덜어 줄 폼 기능 개선을 담고 있음.
input 태그의 각종 type 속성이 추가되어 다양한 기능을 제공
Web Browser 들마다 지원하는 Form 이 다름 

예]
<input type="date" /> 
<input type="datetime" /> 
<input type="email" /> - email 을 받아들이는 input type.email Type 을 지원하지 않는 Web Browser 는 text type 으로 인식을 할 것이고 
			 Web Browser 에 따라서는 Validation Check 까지 할 수 있도록 지원

<input type="month" />
<input type="number" /> 
<input type="range" />
<input type="tel" /> -tel Type 의 경우는 완전히 숫자만 입력할수 있는 키 패드가 보임

<input type="time" /> 
<input type="url" />-Web Browser 에서는 text type 의 외관과 별 차이가 없다.스마트 폰에서 볼때 텍스트 입력시 자동으로"/" 와 ".com" 버튼이 보임


<input type="file" /> 
-file Type 의 경우 예전에는 하나의 input Tag 에 하나의 파일만 선택할 수 있었다.
하지만 HTML 5 에서는 multiple 속성을 주어 여러 파일들을 선택할 수 있고 accept 속성을 사용하여 MIME type 을 선택하여 파일들을 filtering 할 수 있다.
 예]<input type="file"  multiple="multiple" accept="image/jpeg/image/gif"/> 



placeholder="미리 보여줄 텍스트" 속성-input요소에 적용하여 미리 사용자에게 텍스트를 보여주는 기능으로
                                      사용자가 클릭 을 하면  Placeholder Text 는 사라짐 
				      이 기능을 javascript 의 도움없이도 사용할 수 있게 사용

autofocus="autofocus"속성-페이지 로드시에 input요소에 포커스를 줄때 사용.이전에는 자바스크립트로 구현.

contenteditable="true" 속성-지정된 요소에 대해서 편집 가능하게 함.
draggable="true" 속성-요소를 드래그 할 수 있도록 해줌.웹 브라우저 외부로의 드래그가 가능
hidden="hidden"속성
    -요소를 HTML 정보 구조내에서 숨기기 위한 속성
     기존에는 CSS의  display , visibility 속성 
     이용 
     hidden – HTML 구조에서 완전히 제거한 효과 


required="required"속성-입력값이 있는 지를 검증함.

	 <form method="post">
		<input type="text"  required="required" />
		<button type="submit">전송</button>
	</form>



3. 웹 스토리지

-클라이언트에 간단한 정보를 저장하기 위한 저장 공간.
 즉 브라우져의 내부 스토리지를 사용할 수 있도록 제공해주는 기능
-기존의 쿠키에 대한 문제점을 보완하기 위하여 HTML5에 추가된 기능
 서버로는 전달이 되지 않고 브라우져 로컬에만 저장된다.
 즉,네트워크로는 전송되지 않기 때문에 네트워크 레벨에서는 안전하다
 
 ※쿠키의 한계
	- 4KB의 데이터 저장 제한
	- 쿠키는 매 HTTP 요청에 포함되어 있어 웹이 느려지게 하는 원인이 될 수 있음	
	- HTTP 요청에 암호화 되지 않고 보내기 때문에 보안에 취약함
	- 쿠키는 사용자의 로컬에 텍스트로 저장 되어있어 쉽게 접근, 
	  내용 확인이 가능함

	
-웹 스토리지의 저장 데이터는 키와 값의 쌍으로 저장.
-로컬 스토리지 데이터는 물리적으로 저장된다.(http://stackoverflow.com/questions/9669184/how-is-html5-webstorage-data-physically-stored)
-로컬 스토리지는 사용자가 직접 데이터를 삭제하기 전까지 
 영구적으로 보관되고 만료 기간을 설정할 수 없다.        
	 

-개인화 기능등을 웹스토리지로 관리하면 아주 편리하게 활용할 수 있다.

-웹 스토리지는 용도에 따라 로컬 스토리지, 세션 스토리지로 나눈다.




3-1]로컬 스토리지

	특징]
		-데이터 저장 시간에 제한이 없어 영구적 보관이 가능
		-도메인마다 별도의 저장 영역을 생성
		-도메인마다 생성된 로컬 스토리지에 서로 접근 불가
		-같은 도메인에 속해 있는 웹페이지들은 모두 접근 가능.
		-단,웹브라우저마다 별도의 로컬 스토리지를 가짐 즉 
		     브라우저마다 별도의 저장 장소를 가짐.

	주요 메소드 및 속성]

		-long length : 저장되어 있는 데이터 수 반환
		-string key(index) : 인덱스에 해당하는  키를 반환
		-string getItem(key) : 키에 해당하는 값을 반환,값을 찾지 못했다면, 에러를 발생하지 않고 null을 리턴
		-void setItem(key,data) : 키와 값의 쌍으로 데이터 저장
		-void removeItem(key) : 키에 해당하는 값 삭제
		-void clear() : 저장되어 있는 모든 데이터 삭제

	데이터 저장]
		-방법1]localStorage.setItem(key, data);
		 예:localStorage.setItem("CS_LANGUAGE", "HTML5");

		-방법2]localStorage.key = data;

		예:localStorage.CS_LANGUAGE = "HTML5";

		-방법3]localStorage[key] = data;

		예: localStorage["CS_LANGUAGE"] = "HTML5";

	데이터 읽기]

		-방법1]var 변수 = localStorage.getItem(key);

		예:var value = localStorage.getItem("CS_LANGUAGE");

		-방법2]var 변수 = localStorage.key;

		예: var value = localStorage.CS_LANGUAGE;

		-방법3]var b변수 = localStorage[key];

		예: var value = localStorage["CS_LANGUAGE"];

	데이터 삭제]

	-방법1]localStorage.removeItem(key);

	-방법2]delete localStorage.key;

	-방법3]delete localStorage[key];

3-2]세션 스토리지

	특징]

		-데이터의 저장 기간이 제한됨 즉 세션이 종료되면 자동 폐기
		-각 세션마다 따로 저장 영역을 생성 
		-같은 도메인이라고 해도 다른 세션에서 생성되면 서로의 스토리지에 접근 불가능

	※세션스토리지는 세션종료시 즉 웹브라우저를 닫으면 데이터가 사라지나
	  로컬스토리지는 사라지지 않는다.

	  사용방법는 로컬스토리지와 동일, localStorage객체를 sessionStorage로 변경하면된다.



	

4. 위치 정보(Geolocation API)

-HTML5 는 위치 정보와 관련한 Geolocation API를 포함하고 있다
-현재 웹 페이지가 실행되는 단말의 위도, 경도와 같은 위치 정보를 얻어 올 수 있다
-Geolocation API는  GPS(Global Positioning System) 나 와이파이등으로 
 현재 위치를 확인한다.
 GPS장치가 좀더 정확한 위치를 확인할 수 있다.
-Geolocation 지원 브라우저 현황:http://caniuse.com/ 에서 확인 가능
-사용자의 위치 정보는 반드시 사용자의 허가를 받아서 수집할 수 있도록 되어있다
-Geolocation API는 navigator.geolocation 객체를 통해 사용할 수 있다.
-geolocation 객체가 존재하는 경우 지오로케이션 서비스가 가능하다
 아래는 geolocation객체의 사용가능 여부를 알아내는 코드이다
	if (navigator.geolocation) {
		/* 지오로케이션 사용 가능 */
	} else {
		/* 지오로케이션 사용 불가능 */
	}





4-1]현재 위치 가져오기


	-navigator.geolocation 객체의 getCurrentPosition() 메소드 호출
	-위치 정보를 일회성으로 받아 올 때 사용
	-사용법
	navigator.geolocation.getCurrentPosition(successCallback[, errorCallback, options] )

	successCallback:위치가 확인되면 실행될 콜백함수 지정
	errorCallback:에러가 발생할 때 실행될 콜백함수 지정

	PositionOptions:PositionOptions 객체인데, 
	               위치값이 반환된 최대 시간과 요청을 대기할 시간, 
				   그리고 높은 정확도를 사용할 지 여부를 지정

	PositionOptions객체의 속성들]
	enableHighAccuracy-최대한 정확도를 높게 받을 것인지를 지시하는 불리언 값. true 값을 지정하면 장치에서 정확도가 높은 위치 정보를 제공 할 수 있으면 제공해 준다.
	                        이것은 응답 시간이 느려지거나 전력소비(예:모바일 장치의 GPS 칩)가 늘어 나니까 주의해야 한다. 반대로 false를 지정하면 장치는 적은 전력을 사용하든 
			   빠른 응답을 하든 자원을 적절히 사용할 자유를 갖게 된다.
	timeout-위치 정보 확인에 대한 시간 제한 설정(단위:천분의 일초 단위, 시간 제한 초과 시 TIMEOUT 오류 발생),기본값은 Infinity
	maximumAge-위치 정보의 유효 기간 설정,유효 기간보다 오래되면 해당 정보는 폐기하고 새 위치 정보 확인 시도
		   0을 지정하면 항상 새로운 위치 정보를 요청

4-2]현재 위치 갱신하기
	-navigator.geolocation 객체의 watchPosition()  메소드 호출
	-위치 정보가 변경(장치가 움직였거나 좀 더 정확한 위치 정보가 도착했을때)될때마다 갱신된 위치 정보를  알아낼때 호출
	-사용법
	var watchID=navigator.geolocation.watchPosition(successCallback[, errorCallback, options] )


	-watchPosition() 메서드는 숫자로 된 ID를 반환하며, watcher를 식별하는데 사용. 사용자 위치 갱신을 할 필요가 없을 때 clearWatch() 에 매개변수로 넘겨 준다.
	 예]navigator.geolocation.clearWatch(watchID);

4-3]위치와 관련된 객체들

	-getCurrentPosition() 또는 watchPosition()를 호출할 때 
	 전달한 successCallback함수에 Position 객체가 첫 번째 파라미터로 전달된다.

	-사용자의 위치는 Position 객체로 표현되며 Coordinates 객체를 참조한다.
	-Position 객체는 아래의 프로퍼티를 갖는 자바스크립트 객체이다 
		coords: Coordinates 객체, 현재의 위치를 정의하는 객체.
		timestamp:위치를 수집한 시간을 표현하는 숫자

	-Coordinates 객체는 아래의 프러퍼티를 갖는 자바스크립트 객체이다 
		latitude:위도, 소수점을 포함하는 숫자.
		longitude:경도, 소수점을 포함하는 숫자.
		altitude:고도, 해수면을 기준으로 미터 단위, null 일 수 도 있다.
		accuracy:미터로 위도와 경도의 정확도를 나타내는 숫자.
		altitudeAccuracy:미터로 고도의 정확도를 나타내는 숫자, null 일 수 도 있다.
		heading:장치가 움직이는 방향을 나타내는 숫자. 이 값은 정북에서 벗어난 각을 나타낸다. 
		        0도는 정북향을 나타내며 방향은 시계방향(동쪽은 90도이고, 서쪽은 270도라는 의미)이다.  
			speed 값이 0이면 heading 값은 NaN이 된다. 장치에서 heading 정보를 제공 할 수 없을 때 이 값은 null이 된다.
		speed:장치의 속도를 나타내며, 초당 미터 값을 숫자로 나타낸다. 이 값은 null 일 수 도 있다.

4-4]에러 처리
	-getCurrentPosition() 또는 watchPosition()를 호출할 때 전달한 errorCallback함수에 PositionError 객체가 파라미터로 전달된다.
	-PositionError 객체는 아래의 프러퍼티를 갖는 자바스크립트 객체이다 

		code:에러 코드를 나타내는 숫자. 
		     UNKNOWN_ERROR - 0(알 수 없는 오류)
		     PERMISSION_DENIED - 1(권한 없음)		    
		     POSITION_UNAVAILABLE :2(위치 확인 불가)
		     TIMEOUT - 3(시간초과)
		   
		message: 에러 메시지


4-5]지도 서비스
	-지도 서비스 관련 API 제공 사이트들은 다음과 같다.
		구글 맵스:https://developers.google.com/maps/?hl=ko
		Bing Maps:http://www.microsoft.com/maps/
		네이버 지도:http://dev.naver.com/openapi/apis/map
		다음 지도:http://dna.daum.net/apis/maps

5. 웹 소켓

-클라이언트(웹 브라우저)와 서버(웹 서버)간에 지속적으로 연결된 TCP 라인을 통해 실시간으로 데이터를 주고 받을 수 있도록 하는 
 양방향 통신을 가능하게 하는 HTML5의 새로운 기능
-데이터 수신을 위해 서버가 클라이언트에게 전송해 주는 푸시(push)방식이다
즉 데이타 수신을 위해 클라이언트가 서버에게 요청하는 폴링(polling) 방식이 아니다.
-플러그 인 없는 일관되고 표준화된 순수 웹 환경에서 실시간 양방향 통신을 위한 스펙이 바로 '웹 소켓(Web Socket)' 이다
-사용 프로토콜 형태는 ws://~~ 형태로 사용	
-서버부하, 보안(Security)적인 측면과 세션 관리 등의 문제를 가지고 있고 가장 큰 단점으로는 
 구 브라우저(IE 8.0)에서는 작동하지 않는 문제점이 있다

	5-1]현재 주요 브라우저 별 WebSocket 지원여부
		
		-http://caniuse.com/에서 확인가능

	5-2]웹 소켓 구현하기
		
		-웹 소켓 역시 일반적인 TCP 소켓 통신처럼 서버와 클라이언트간 데이터 교환이 이루어지는 형태이다. 
		-클라이언트에서는 HTML5 웹 소켓이 제공하는 자바스크립트 API를 이용해 서버에 연결하고 데이터를 송/수신하는 코드를 구현해야 하며 
		 서버에서는 웹 소켓 프로토콜에 맞는 전용 장치가 구축되어 있어야 한다


		웹 소켓 클라이언트]
			
			STEP1] 서버연결

				-HTML5가 제공하는 WebSocket 객체를 통해 서버 연결을 수행.
				-일반 통신은 ws, 보안 통신은 wss 프로토콜을 이용한다
				-기본 포트 역시 http,https와 동일한 80,443을 이용한다

				예]var wSocket = new WebSocket("ws://localhost:8080/endpoint");


			STEP2] 데이터 송신

				-WebSocket 객체의 send 함수로 데이터를 서버로 송신할 수 있다
				
				예]wSocket.send("송신 메시지");

			STEP3] 데이터 수신

				-서버에서 푸시(전송)하는 데이터를 받으려면 message 이벤트를 구현하면 된다

				예]wSocket.onmessage = function(e){ //매개변수 e를 통해 수신된 데이터를 조회할 수 있다}

			-추가로 아래와 같은 이벤트도 제공된다

			-open이벤트:웹소켓이 연결되었을 때 발생
			-close이벤트: 서버와 연결이 끊겼을 때 발생
			-message이벤트: 서버로부터 메시지가 도착할 때 발생(데이타 수신시 구현)
			-error이벤트: 에러가 났을때 발생하는 이벤트

		웹 소켓 서버]
		
			-웹 소켓은 일반적인 TCP 소켓과는 다른 프로토콜로 설계되었다. 
			  따라서 기존 TCP 서버를 그대로 이용할 수 없고 
			 새로 구현해야 하는데 웹 소켓 서버 사양에 맞도록 구현해야 한다. 

			-웹 소켓 서버를 위한 다양한 오픈소스 모듈은 아래와 같다
			 pywebsocket(PYTHON):https://github.com/google/pywebsocket
			 phpwebsocket(PHP):https://code.google.com/archive/p/phpwebsocket/
			 jWebSocket(JAVA):http://webscripts.softpedia.com/접속후 jWebSocket으로 검색  

			 web-socket-ruby(RUBY):https://github.com/gimite/web-socket-ruby
			 Socket.IO-node(NODE.JS):https://github.com/socketio/socket.io



		웹 소켓 테스트]


		웹소켓 서버 구동]

		1.jWebSocket http://webscripts.softpedia.com/에서 jWebSocket으로 검색 후 Server 프로그램을 다운
		 
		2.시스템 환경 변수에 jWebSocket 경로를 추가
			예]
			-변수이름 : JWEBSOCKET_HOME
			-변수값   : C:\Program Files\jWebSocket-1.0

		3.Java Project생성후 다운받은 jWebSocketServer-버전의 libs폴더의 
		  jWebSocketServer-1.0.jar / jWebSocketServerAPI-1.0.jar / jWebSocketCommon-1.0.jar
		  위 3개 파일을 Build Path로 추가

		4.패키지 생성후 아래 두 개의 소스파일 추가


		[JWebSocketListener.java]

		
		

		processOpened() is called once a connection is opened. An example use of this will be starting a thread that sends updates to client in regular intervals. 
		Similarly, processClosed() is called when the connection closes so that you can perform any clean ups.
		the major processing is done in processPacket(). 
		This method is called whenever the browser sends a message to the server.
		It receives two objects, of types WebSocketServerEvent and WebSocketPacket. 
		First, we use WebSocketPacket#getString() to read the message (which is a question asked by the client). 
		Depending on the question the server sends an answer. 
		The message to be sent is wrapped inside a WebSocketPacket using WebSocketPacket#setString(). Then, 
		we call WebSocketServerEvent#sendPacket(), passing the packet as an argument.
		Next, we create a public class called SocketListener. This class starts a WebSocket implementation server and registers our custom listener to it.



		package web.socket;

		import java.util.List;
		import java.util.Vector;

		import org.jwebsocket.api.WebSocketPacket;
		import org.jwebsocket.api.WebSocketServerListener;
		import org.jwebsocket.kit.WebSocketServerEvent;

		public class JWebSocketListener implements WebSocketServerListener {
			
			
			
			 public void processOpened(WebSocketServerEvent event) {	   
	   
			  }
			  
			  public void processPacket(WebSocketServerEvent event, WebSocketPacket packet) {
			    
				event.getServer().broadcastPacket(event.getConnector(), packet);
				
			  }
			  
			  public void processClosed(WebSocketServerEvent event) {
				 
			  }
		}

		[SocketListener.java]


		package web.socket;

		import org.jwebsocket.config.JWebSocketConfig;
		import org.jwebsocket.factory.JWebSocketFactory;
		import org.jwebsocket.instance.JWebSocketInstance;
		import org.jwebsocket.server.TokenServer;



		public class SocketListener {
			public static void main(String[] args){
			    
			    JWebSocketConfig.initForConsoleApp(new String[]{});
			    JWebSocketFactory.start();
			    TokenServer server = (TokenServer)JWebSocketFactory.getServer("ts0");
			    if(server!=null) {
				server.addListener(new JWebSocketListener());
			    }
			    while (JWebSocketInstance.getStatus() != JWebSocketInstance.SHUTTING_DOWN){
				      try {
						Thread.sleep(250);
				      }
				      catch (InterruptedException e) {}
			    }
			  }
		}
		
		5.main이 있는 클래스를 실행한다
		
		6.실행가능한 jar파일로 묶는다

		  -프로젝트 우클릭->Export->Runnable Jar File선택

		  -Launcher configuration는 main()이 있는 클래스 지정

		  -Export destination에는 jar파일 저장위치 지정
		  -Library handling은 Extract~선택


		 7.서버 구동
		  -6에서 저장 위치로 지정한 디렉토리로 이동하여 java -jar 파일명.jar

		  예] D:\JAVA>java -jar WebSocket.jar


		 웹 클라이언트 제작]



			<!DOCTYPE html>
			<html>
			<head>
			    <title>WebSocket_23.html</title>
				<meta charset="utf-8" />    
				<script type="text/javascript">
				
				
					var wsocket;
					
					var sendMessage=function(){
						
						var nickname = document.getElementById("nickname").value;
						var msg = document.getElementById("message").value;
						wsocket.send("msg:"+nickname+":" + msg);
						document.getElementById("message").value="";
					}
					
					window.onload=function(){
						
						document.getElementById("message").onkeypress=function(event){
							var keycode = (event.keyCode ? event.keyCode : event.which);
							if(keycode == '13'){
								sendMessage();	
							}
							event.stopPropagation();
						}
						
						document.getElementById("sendBtn").onclick=function(){
							
							sendMessage();	
							
						}
						document.getElementById("enterBtn").onclick=function(){
							//jWebSocket 서버]
							wsocket = new WebSocket("ws://localhost:8787");
							wsocket.onopen = onOpen;
							wsocket.onmessage = onMessage;
							wsocket.onclose = onClose;			
										
						}
						document.getElementById("exitBtn").onclick=function(){
							wsocket.close();
							
						}
						
					}
					
					function onOpen(evt) {
						appendMessage("연결되었습니다.");
					}
					function onMessage(evt) {
						var data = evt.data;
						if (data.substring(0, 4) == "msg:") {
							appendMessage(data.substring(4));
						}
					}
					function onClose(evt) {
						appendMessage("연결을 끊었습니다.");
					}
					
				
					function appendMessage(msg) {
						
						document.getElementById("chatMessage").innerHTML+=msg+"<br>";			
						document.getElementById("chatArea").scrollTop = document.getElementById("chatArea").scrollHeight; 
						
					}
				
				</script>
				
			</head>
			<body>
				<fieldset>
					<legend>웹소켓 클라이언트</legend>
					<h2>닉네임</h2>
					<input type="text" id="nickname" style="width:400px">
					<input type="button" id="enterBtn" value="입장">
					<input type="button" id="exitBtn" value="퇴장">
				    
				    <h2>대화 영역</h2>
				    <div id="chatArea" style="width: 600px; height: 200px;overflow:auto;  border: 1px solid black;">
					<div id="chatMessage" ></div>
				    </div>
				    <h2>메시지 입력</h2>
				    <input type="text" id="message" style="width:400px">
				    <input type="button" id="sendBtn" value="전송">
					
				</fieldset>
			</body>
			</html>

		
		


[CSS3]

1. CSS란?	
1-1] CSS:Cascading Style Sheet- HTML문서를 스타일 리쉬하게 
           만드는 스크립트 언어

1-2] CSS구조
        - <head>태그 사이에 기술

        <style>
            
            선택자(SELECTOR) {
                /* CSS 주석 */
                CSS의 속성명1:속성에 해당하는 값1;
                CSS의 속성명2:속성에 해당하는 값2;
                CSS의 속성명3:속성에 해당하는 값3;
                .....
            }

        </style>

1-3] 선택자(Selector):특정 태그를 선택하여, 해당 태그의 속성을 변경 하는 목적으로 사용  


	선택자의 종류]
	 전체 선택자 : * (모든 태그에 공통적으로 적용시키고자
                        할때)
        
        태그선택자: 태그명으로 선택
        아이디선택자: 태그의 아이디에 지정한 값으로 선택(#아이디)
        클래스선택자:  태그의 쿨래스명으로 선택(.클래스명)
        하위선택자 : 특정 태그의 모든 자식및 후손들 선택(스페이바로 구분)
        자식선택자 : 특정 태그의 자식 태그만 선택(> 로 구분)
        다중선택자 : 선택자1,선택자2,선택자3 (콤마로 구분)       
        속성 선택자: 태그의 속성으로 선택 ( 선택자[속성명] 혹은 선택자[속성명='속성값'])
	※ 선택자에 정규표현식 적용            
		선택자[속성명*='문자열'] :문자열이 포함된 모든 선택자 가져오기
		선택자[속성명$='문자열']: 문자열로 끝나는 모든 선택자 가져오기
		선택자[속성명^='문자열']: 문자열로 시작하는 모든 선택자 가져오기
		선택자[속성명 ='문자열']: 문자열과 일치하는 모든 선택자 가져오기
	동위 선택자: 같은 수준의 태그 선택자 선택(~혹은 +)  ~은 같은 수준의 모든 태그.+같은 수준의 태그 중 바로 아래에 있는 태그
	반응 선택자: 마우스의 반응에 따른 속성을 설정 할 수 있는 선택자 형태 
	             선택자:hover -마우스 오버된 태그
		     선택자:active-마우스 클릭된 태그

	상태 선택자:태그의 상태에 따라서 CSS속성이 변화는 설정을 할 수 있는 선택자 형태
	            선택자:focus-포커스가 주어진 태그
		    선택자:enabled-활성화된 태그
		    선택자:disabled-비활성화된 태그

	구조 선택자:태그의 구조적인 파악으로 태그를 선택할 경우
	            선택자:nth-child(2n+1) -홀수 번째 태그 선택
		    선택자:nth-child(2n) -짝수 번째 태그 선택
		    선택자:first-child -첫 번째 태그 선택.nth-child(1)과 같다.
		    선택자:last-child -마지막 번째 태그 선택

	문자 선택자:특정 문자 또는 문자열을 선택할 수 있는 선택자
	            선택자:first-letter -선택자의 첫번째 문자
		    선택자:first-line -선택자의 첫번째 라인
		    선택자::selection - 마우스로 드래그한 경우 드래그된 선택자

	링크 선택자:문서에서 링크(href)되어 있는 문자를 선택하여, CSS속성을 설정 할 수 있는 선택자

		     a:hover - 마우스 오버시
		     a:active - 마우스 클릭시
		     a:visited - d이미 방문했던 경우
		    

	부정 선택자:특정 태그를 제외한 모든 태그에 적용하는 선택자.

	after선택자:선택자 뒤에 특정 내용을 추가할 수 잇는 선택자
			선택자::after -  /* 컨텐츠에 또다른 컨텐츠를 삽입하기 위해 content속성 사용*/    
					/*attr(속성명)함수는 속성값을 얻는 함수*/  
					/* 삽입시에는 ' 나 "으로 감싼다*/   

			   예]
				a::after {
					/*content : '추가 내용';
					content :"추가 내용";*/
					content: ' - ' attr(href);

				
				}

2.html문서에 CSS를 적용하는 방법

        1)Inline Style
            예) 
            <h2 style="속성명1:속성값1;속성명2:속성값2;..">제목1</h2>
        2)Embeding Style
           <head>태그사이에 <style>태그를 이용해서 적용
        3)External Style
            CSS파일을 외부파일(확장자는 .css)로 별도로 작성하고
            link태그를 이용해서
            HTML문서에 적용
            <link rel="stylesheet" type="text/css" 
            href="파일명.css"/>

        *CSS의 적용 우선 순위
        * [ 0 ]  <  tag [ 1 ]  <  class [ 10 ]  <  id [100 ]  <  inline style  <  !important

        Inline Style > Embeding Style 과
                       External Style 은 적용시키고자 하는
                       태그와 가까운 style이 적용된다.


3. 폰트 관련 속성

	-글자(텍스트)와 관련된 CSS속성

        font-family:글꼴 설정 =>굴림체,돋움체
        font-size:글꼴의 크기 =>12pt(기본크기),1em,1.2em
                                1pt(point)는 1/72inch
        font-style:글꼴의 스타일 지정 =>italic,normal
        font-weight:글꼴 두께 =>normal,bold,100~900
                               100에 가까울수록 얇다

        font-variant:소문자를 대문자로 =>normal,small-caps
        letter-spacing:글 자 사 이 의 간   격 =>10pt
        line-height:줄간격 => 180% (주로 블락 엘리먼트에서 세로로 가눙데 배치시 사용: height와 line-height를 동일하게 주면 세로로 가운데 배체됨)
        color:글자색 =>red,#ff38f4,#f00

        *css속성에 속성값을 줄때 숫자형의 값을 줄때는
        값이 0이면 단위(pt,px,em등)를 표시 안해도 되나
        값이 0이 아니면 반드시 단위를 표시해라.
    
4. 문단관련 속성
	-문단(paragraph)과 관련된 CSS속성

	    text-align:태그영역안에 있는 문단 정렬(수평방향)
		       (left,center,right,justify)
		       inline엘리먼트에는 의미 없다
	    text-decoration: 밑줄긋기 
			    (none,underline,overline,line-through)
			     none:밑줄 없애기(주로 a태그에 적용)
					      
			     underline:밑줄
			     overline:윗줄
			     line-through:가운데 선 긋기
			       

	    text-indent:들여 쓰기 예]10pt
			    inline엘리먼트에는 의미 없다
			    (IE에서만 한번 들여쓰기 됨)
	    vertical-align:수직방향의 정렬(top,middle,bottom)
			   주로 img태그에 적용시
			   block/inline 엘리먼트에 적용시 의미 없다.
			   수직방향은 여백(margin/padding으로 조정)
			
5. 배경관련 속성

        background-color:배경색 지정

        background-image:배경이미지 지정                
                    background-image:url(이미지경로)
        background-repeat:배경이미지의 반복속성 지정
                repeat:x,y축으로 배경이미지 반복
                repeat-x:x축으로 반복
                repeat-y:y축으로 반복
                no-repeat:반복 안함
        background-position:배경이미지의 위치 지정
               background-position:가로위치 세로위치
                                   위치값은 px이나 %로 지정
        background-size:사이즈 지정(보통 %로 지정)
        ※background속성으로 배경이미지 및 반복속성 및
          위치를 동시에 줄 수 있다.
          예]
          background:url(이미지경로) 반복속성 이미지위치
          단, 순서는 상관없다.


6.테두리 속성
	 
        [테두리 모양]
        border-style:전체 테두리 모양지정
        border-top-style:위쪽 테두리
        border-bottom-style:아래쪽 테두리
        border-left-style:왼쪽 테두리
        border-right-style:오른쪽 테두리

            모양에 줄수 있는 속성값:
            none:테두리가 없음
            dotted:점선  
            dashed:점선보다 긴 실선
            solid:실선 
            double:이중실선

       [테두리 색상]

        border-color:전체 테두리 색상지정
        border-top-color:위쪽 테두리
        border-bottom-color:아래쪽 테두리
        border-left-color:왼쪽 테두리
        border-right-color:오른쪽 테두리

         [테두리 두께]
        *주로 px단위로 지정
        border-width:전체 테두리 두께지정
        border-top-width:위쪽 테두리
        border-bottom-width:아래쪽 테두리
        border-left-width:왼쪽 테두리
        border-right-width:오른쪽 테두리

        ※테두리의 모양,색상, 두께를 border속성으로
          동시에 부여할 수 있다
          예]
          border:색상 두께 모양
          순서는 상관없다

7.목록 속성
	list-style-type : disc;●
		                  circle;○
		                  square;■
		                  decimal;//숫자 1 2 3 
		                  lower-roman;//소문자 로마숫자 i ii iii iv
		                  upper-roman;//대문자 " I II III IV
	                      lower-alpha;//소문자 알파벳   a b
	                      upper-alpha;//대문자 알파벳
	                      none;//블릿 제거
        list-style-image:url(이미지경로);블롯대신 이미지로 교체

        list-style-position:inside;블릿이 li태그 테두리 안으로 
                                   들어감
                            outside;블롯 내어쓰기(기본값)

        *목록 태그(ul이나 ol)를 inline 엘리먼트로 만들때
        <ul> 이나 <ol>에 display:inilne(display:inline-block)을 적용시키는게 아니라
        <li>태그에 적용 시켜야 한다.
        위 속성을 적용시키면 list-style-type:none이 동시에 적용되는 
        효과가 있다.

        *display:inline은 모든 block엘리먼트에 적용되는 것으로
                 block엘리먼트를 inline엘리먼트로 바꿔 준다.

	     display:inline-block -배치는 가로배치가 되나 블락 엘리먼트의 속성은
	                      유지됨.

8.여백 속성
	 
    margin:태그 외부의 여백

    margin:상하좌우 모든 여백 지정
    margin-top:위쪽 여백
    margin-bottom:아래쪽 여백
    margin-left:왼쪽 여백
    margin-right:오른쪽 여백

    padding: 태그와 태그안에 있는 컨텐츠(내용)과의 여백

    padding:상하좌우 모든 여백 지정
    padding-top:위쪽 여백
    padding-bottom:아래쪽 여백
    padding-left:왼쪽 여백
    padding-right:오른쪽 여백

    *서로 여백이 겹칠때 block과 block 사이에서는
     큰값을 따른다.
     단, 인라인 엘리먼트사이에서는 +연산이 되서 
     여백이 결정된다.
     또한 블락과 인라인에서 margin-top,margin-bottom
     을 적용하려면 블락엘리먼트에 주어야 한다.

    *margin에는 음수값이 적용되나 padding은 음수값을 주면 0을 준거와 같다

    *block엘리먼트에서 컨텐츠의 가로정렬은 text-align으로
     수직정령은 padding으로 정렬한다.
     (inline엘리먼트는 정렬이 적용 안됨)

    *한꺼번에 위쪽,아래쪽,왼쪽,오른쪽등의 여백을 줄때는 
     margin이나 padding이나
     순서가 정해져 있다.

      -아래내용은 padding도 동일하다
      margin :10px (상 하 좌 우 10px씩 여백) 
      margin :10px 20px (상하 여백은 10px 좌우 여백은 20px)
      margin :10px 5px 30px(상 여백은 10px 좌우 여백은 5px 
                            하 여백은 30px)
      margin : 5px 10px 20px 30px
            (상(5px) 우(10px) 하(20px) 좌(30px) =>시계방향


9. 보이기 안보이기 속성

	diplay와 visibility속성은 레이어(div)보였다 안보였다 
        할수 있게 하는 CSS속성(div뿐만아니라 모든 태그에 적용됨)
    
	visibility: visible(보이게)
			hidden(안보이게)  ==>영역은 그대로 레이어가 
			사라짐

	display: block
	          inline-block
		      none(안보이게)       ==>영역도 레이어도 사라짐
	disply:none
	※-인라인->블락으로 block:(인라인을 블락으로)
          -블락->인라인으로 inline(블락엘리먼트를 인라인엘리먼트로 만듬)
	  -블락->블락인데 배치는 가로 배치로 inline-block

10. DIV배치 관련 속성

        float:레이어(div태그)의 위치 지정
              left,right
              앞선 레이어의 영향을 받는다

              박스의 크기가 인라인 엘리먼트처럼 컨텐츠 
              크기로 줄어든다.

        clear:float의 효과를 무력화 시킨다
              left,right,both

        position:레이어의 위치지정
            absolute:절대위치-웹브라우저 좌측 상단(0,0)을 
            기준으로 위치 지정
            relative:상대위치-레이어안의 레이어가 바깥쪽 
            레이어를 기준으로 위치지정

            위는 바깥 div기준임

            ※단,안쪽 div는 무조건 바깥 div를 기준으로 
              배치된다.안쪽 div는 absolute를 주든 relative를 주든
              바깥 div가 기준이된다.
              또한 안쪽에 여러개의 div를 연속으로 배치한 경우
              absolute를 준 경우 바깥div가 0,0을 기준으로
              배치되고 relative를 준경우
              먼저 배치된 안쪽 div의 좌측 하단을 기준으로 상대적으로 배치가 된다.

            

            top:y좌표
            left:x좌표

         

        zindex:레이어의 위치 지정, 값이 높을 수록 레이어가 
               위에 떠 있다.    
               레이언 안의 레이어는 z-index속성이 의미없다.
               왜냐하면 레이안의 레이어가 바깥 레이어 보다 
               항상 위에 떠 있다.

	     ※ 레이어의 크기(width)지정시에는 float의
            left,right값으로 위치를 지정하고
            width미지정시에는 float의 영향을 받아
            빈 영역에 div가 위치한다.

	    ※  바깥 div는 안쪽 div보다 항상 밑에 떠 있다
            고로 z-index로 바깥 div를
            안쪽 div보다 위에 뜨게 할 수 없다
                


웹 폰트]
인터넷만 연결되어 있다면, 다양한 폰트를 웹사이트 방문자에게 제공할 수 있도록
 고안된 폰트.
웹사이트를 방문하는 순간, 웹폰트를 다운받아 웹사이트를 구성.

적용순서]
1.https://fonts.google.com/접속
2.원하는 폰트 선택후 quick use아이콘 클릭
3.각 단계별로 해당 문서에 적용


변형]
html 태그 요소의 속성(형태, 색상 등등)이 변경될 때, 
CSS3변형 속성을 적용하여 변화하는 단계에 움직임(애니메이션)을 적용할 수 있다
http://ielselog.blogspot.kr/2013/09/understand-css-trasition.html 

키프레임과 애니메이션]

키프레임을 이용해서 애니메이션을 만들 수 있다.


변환]
javascript에서만 구현이 가능한 변환(transform)기능을 
이제는 CSS3에서도 구현이 가능 
	변환함수]
	translate(x, y)	이동
	translateX      x이동
	translateY 	y이동
	scale(x, y)	크기
	scaleX		x축 크기
	scaleY		y축 크기
	skew(x, y)	기울기
	skewX		x축 기울기
	skewY		y축 기울기
	rotate(n)	회전


규칙]
CSS3에서 @ 시작하는 키워드들을 규칙이라고 한다.

@keyframe 규칙-애니메이션을 줄때 사용하는 규칙

@import 규칙- link를 대신하는 규칙
	      단,<style>태그 내부에 위치해야 한다.
	      또한 <style>태그 상단에 위치해야 한다.


예]
	<style>
		@import url('title.css');
		@import url('content.css');
		@import url('date.css');

		* { margin:0; padding:0; }
	      
		div { width:200px; height;200px }
		
		
		
    </style>
	

@media 규칙-사용 환경에 따라 적용 CSS를 다르게 할 수 있다.

	미디어 종류 
	- all : 모든 미디어 타입
	- aural : 음성 합성 장치
	- braille : 점자 표시 장치
	- handheld : 손으로 들고 다니면서 볼 수 있는 작은 스크린에 대응하는 용도
	- print : 인쇄 용도
	- projection : 프로젝터 표현 용도
	- screen : 컴퓨터 스크린을 위한용도
	- tv : 음성과 영상이 동시 출력되는 TV와 같은 장치
	- embossed : 페이지에 인쇄된 점자 표지 장치


방법1]link태그에 media속성 이용해서 적용
방법2]@media 규칙 사용

확장접두사]

-CSS3에서는 특정 웹 브라우저만을 위한 속성을 적용하기 위한 
 웹 브라우저 제조사별 확장 접두사를 지원
-----------------------------------------------------------+--------------------------------------
브라우저                                                   |  확장 접두사
-----------------------------------------------------------+--------------------------------------
인터넷 익스플로러                                          |  -ms-
-----------------------------------------------------------+--------------------------------------
파이어폭스(모질라의 Gecko 엔진을 사용하는 웹 브라우저)     | -moz-
-----------------------------------------------------------+--------------------------------------
크롬, 사파리(웹킷 엔진을 사용하는 웹 브라우저)             | -webkit-
-----------------------------------------------------------+--------------------------------------
오페라                                                     | -o-
-----------------------------------------------------------+--------------------------------------

             
 

미디어 쿼리(Media query)]
-Media Query는 기기의 해상도에 따라서 CSS 를 다르게 지정함 

예]
--------------+-------------------------------------------------------------+---------------------------
적용 환경     |  Media Query                                                | 적용범위(화면크기)
--------------+-------------------------------------------------------------+---------------------------
데스크 탑     |  media="screen and (min-width:1000px)"                      | 최소 1,000px 이상일경우
--------------+-------------------------------------------------------------+---------------------------
태블릿        | media="screen and (min-width:640px) and (max-width:999px)"  | 최소 640px 이상 최대 999px 이하
--------------+-------------------------------------------------------------+---------------------------
모바일        | media="screen and (max-width:639px)"                        | 최대 639 px 이하 일 경우 
--------------+-------------------------------------------------------------+---------------------------

1.CSS3에 새롭게 추가된 속성

테두리]둥근 테두리를 만들 수 있고, 그림자도 넣을 수 있다. (IE9제외)
-IE8 이하에서는 적용되지 않는다.
해결방법]
1]PIE다운로드
-http://css3pie.com/download/
2]압축을 풀면 여러 개의 파일이 있는데, 그 중 PIE.htc를 프로젝트에 추가.
3]해당 CSS속성에 behavior: url( "PIE.htc" );속성 추가

둥근 테두리]
-단위는 px, %, em으로 지정.
border-radius: border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius 

border-top-left-radius : 위 왼쪽
border-top-right-radius : 위 오른쪽
border-bottom-right-radius : 아래 오른쪽
border-bottom-left-radius : 아래 왼쪽


selector {border-top-left-radius: 가로 반지름의 길이,세로 반지름의 길이;}  속성값을 하나만 쓰면 가로 반지름의 길이와 세로 반지름의 길이가 같다는 뜻


그림자 속성]
box-shadow: offset-x, offset-y, blur, spread, color, inset 순으로 작성한다.

offset-x : 수평 그림자의 offset 값으로 반드시 필요하다.
offset-y : 수직 그림자의 offset 값으로 반드시 필요하다.
blur : 그림자 가장자리를 부드럽게 처리하는 정도를 나타나매 선택적 값이다. 0이면 가장 날카롭게 처리한다.
spread : 그림자의 크기를 나타내며 선택적 값이다.
color : CSS 컬러 값을 지정하는 선택적 값이다.
inset : 안쪽 그림자를 정의하는 선택적 키워드이다.


<style> 
.round {
	border:1px solid #ff0000;	
	width:100px;
	height:100px;
	border-radius:25px;
	-moz-border-radius:25px; /* Firefox 3.6 and earlier */
	background-color: #ffaa00;
}

.shadow {
	width:100px;
	height:100px;	
	background-color:#0f0;
	-moz-box-shadow: 10px 10px 10px #aaaaaa; /* Firefox 3.6 and earlier */
	-webkit-box-shadow: 10px 10px 10px #aaaaaa; /* Safari */
	box-shadow: 10px 10px 10px #aaaaaa;
}

</style>

※ box-sizing 속성-테두리를 박스 안에 넣느냐 혹은 테두리를 박스밖에 넣는냐 
                        결정하는 속성
                       레이아웃 설계시 레이아웃 깨지는 것을 막기 위해 박스 안에
		               둘 경우 사용.

		   속성값: border-box-박스 안에 테두리 두기
		           content-box-박스 밖에 테두리 두기

백그라운드 이미지 속성]-백그라운드의 이미지 사이즈 조절과 백그라운드에 또 다른 백그라운드를 이중으로 적용





















